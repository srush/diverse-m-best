// Generated by the protocol buffer compiler.  DO NOT EDIT!

package shortestPath;

public final class HypergraphProto {
  private HypergraphProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Vertex extends
      com.google.protobuf.GeneratedMessage {
    // Use Vertex.newBuilder() to construct.
    private Vertex() {}
    
    private static final Vertex defaultInstance = new Vertex();
    public static Vertex getDefaultInstance() {
      return defaultInstance;
    }
    
    public Vertex getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return shortestPath.HypergraphProto.internal_static_shortestPath_Vertex_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return shortestPath.HypergraphProto.internal_static_shortestPath_Vertex_fieldAccessorTable;
    }
    
    // required int32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private int id_ = 0;
    public boolean hasId() { return hasId; }
    public int getId() { return id_; }
    
    // required string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    public final boolean isInitialized() {
      if (!hasId) return false;
      if (!hasName) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasId()) {
        output.writeInt32(1, getId());
      }
      if (hasName()) {
        output.writeString(2, getName());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getId());
      }
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static shortestPath.HypergraphProto.Vertex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Vertex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(shortestPath.HypergraphProto.Vertex prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private shortestPath.HypergraphProto.Vertex result;
      
      // Construct using shortestPath.HypergraphProto.Vertex.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new shortestPath.HypergraphProto.Vertex();
        return builder;
      }
      
      protected shortestPath.HypergraphProto.Vertex internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new shortestPath.HypergraphProto.Vertex();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return shortestPath.HypergraphProto.Vertex.getDescriptor();
      }
      
      public shortestPath.HypergraphProto.Vertex getDefaultInstanceForType() {
        return shortestPath.HypergraphProto.Vertex.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public shortestPath.HypergraphProto.Vertex build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private shortestPath.HypergraphProto.Vertex buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public shortestPath.HypergraphProto.Vertex buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        shortestPath.HypergraphProto.Vertex returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof shortestPath.HypergraphProto.Vertex) {
          return mergeFrom((shortestPath.HypergraphProto.Vertex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(shortestPath.HypergraphProto.Vertex other) {
        if (other == shortestPath.HypergraphProto.Vertex.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setId(input.readInt32());
              break;
            }
            case 18: {
              setName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required int32 id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public int getId() {
        return result.getId();
      }
      public Builder setId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      // required string name = 2;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
    }
    
    static {
      shortestPath.HypergraphProto.getDescriptor();
    }
    
    static {
      shortestPath.HypergraphProto.internalForceInit();
    }
  }
  
  public static final class Hyperedge extends
      com.google.protobuf.GeneratedMessage {
    // Use Hyperedge.newBuilder() to construct.
    private Hyperedge() {}
    
    private static final Hyperedge defaultInstance = new Hyperedge();
    public static Hyperedge getDefaultInstance() {
      return defaultInstance;
    }
    
    public Hyperedge getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return shortestPath.HypergraphProto.internal_static_shortestPath_Hyperedge_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return shortestPath.HypergraphProto.internal_static_shortestPath_Hyperedge_fieldAccessorTable;
    }
    
    // required int32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private int id_ = 0;
    public boolean hasId() { return hasId; }
    public int getId() { return id_; }
    
    // required double weight = 2;
    public static final int WEIGHT_FIELD_NUMBER = 2;
    private boolean hasWeight;
    private double weight_ = 0D;
    public boolean hasWeight() { return hasWeight; }
    public double getWeight() { return weight_; }
    
    // repeated int32 childrenIds = 3;
    public static final int CHILDRENIDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> childrenIds_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getChildrenIdsList() {
      return childrenIds_;
    }
    public int getChildrenIdsCount() { return childrenIds_.size(); }
    public int getChildrenIds(int index) {
      return childrenIds_.get(index);
    }
    
    // optional int32 parentId = 4;
    public static final int PARENTID_FIELD_NUMBER = 4;
    private boolean hasParentId;
    private int parentId_ = 0;
    public boolean hasParentId() { return hasParentId; }
    public int getParentId() { return parentId_; }
    
    public final boolean isInitialized() {
      if (!hasId) return false;
      if (!hasWeight) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasId()) {
        output.writeInt32(1, getId());
      }
      if (hasWeight()) {
        output.writeDouble(2, getWeight());
      }
      for (int element : getChildrenIdsList()) {
        output.writeInt32(3, element);
      }
      if (hasParentId()) {
        output.writeInt32(4, getParentId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getId());
      }
      if (hasWeight()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, getWeight());
      }
      {
        int dataSize = 0;
        for (int element : getChildrenIdsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getChildrenIdsList().size();
      }
      if (hasParentId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getParentId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hyperedge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(shortestPath.HypergraphProto.Hyperedge prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private shortestPath.HypergraphProto.Hyperedge result;
      
      // Construct using shortestPath.HypergraphProto.Hyperedge.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new shortestPath.HypergraphProto.Hyperedge();
        return builder;
      }
      
      protected shortestPath.HypergraphProto.Hyperedge internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new shortestPath.HypergraphProto.Hyperedge();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return shortestPath.HypergraphProto.Hyperedge.getDescriptor();
      }
      
      public shortestPath.HypergraphProto.Hyperedge getDefaultInstanceForType() {
        return shortestPath.HypergraphProto.Hyperedge.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public shortestPath.HypergraphProto.Hyperedge build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private shortestPath.HypergraphProto.Hyperedge buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public shortestPath.HypergraphProto.Hyperedge buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.childrenIds_ != java.util.Collections.EMPTY_LIST) {
          result.childrenIds_ =
            java.util.Collections.unmodifiableList(result.childrenIds_);
        }
        shortestPath.HypergraphProto.Hyperedge returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof shortestPath.HypergraphProto.Hyperedge) {
          return mergeFrom((shortestPath.HypergraphProto.Hyperedge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(shortestPath.HypergraphProto.Hyperedge other) {
        if (other == shortestPath.HypergraphProto.Hyperedge.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasWeight()) {
          setWeight(other.getWeight());
        }
        if (!other.childrenIds_.isEmpty()) {
          if (result.childrenIds_.isEmpty()) {
            result.childrenIds_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.childrenIds_.addAll(other.childrenIds_);
        }
        if (other.hasParentId()) {
          setParentId(other.getParentId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setId(input.readInt32());
              break;
            }
            case 17: {
              setWeight(input.readDouble());
              break;
            }
            case 24: {
              addChildrenIds(input.readInt32());
              break;
            }
            case 32: {
              setParentId(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required int32 id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public int getId() {
        return result.getId();
      }
      public Builder setId(int value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      // required double weight = 2;
      public boolean hasWeight() {
        return result.hasWeight();
      }
      public double getWeight() {
        return result.getWeight();
      }
      public Builder setWeight(double value) {
        result.hasWeight = true;
        result.weight_ = value;
        return this;
      }
      public Builder clearWeight() {
        result.hasWeight = false;
        result.weight_ = 0D;
        return this;
      }
      
      // repeated int32 childrenIds = 3;
      public java.util.List<java.lang.Integer> getChildrenIdsList() {
        return java.util.Collections.unmodifiableList(result.childrenIds_);
      }
      public int getChildrenIdsCount() {
        return result.getChildrenIdsCount();
      }
      public int getChildrenIds(int index) {
        return result.getChildrenIds(index);
      }
      public Builder setChildrenIds(int index, int value) {
        result.childrenIds_.set(index, value);
        return this;
      }
      public Builder addChildrenIds(int value) {
        if (result.childrenIds_.isEmpty()) {
          result.childrenIds_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.childrenIds_.add(value);
        return this;
      }
      public Builder addAllChildrenIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.childrenIds_.isEmpty()) {
          result.childrenIds_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.childrenIds_);
        return this;
      }
      public Builder clearChildrenIds() {
        result.childrenIds_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 parentId = 4;
      public boolean hasParentId() {
        return result.hasParentId();
      }
      public int getParentId() {
        return result.getParentId();
      }
      public Builder setParentId(int value) {
        result.hasParentId = true;
        result.parentId_ = value;
        return this;
      }
      public Builder clearParentId() {
        result.hasParentId = false;
        result.parentId_ = 0;
        return this;
      }
    }
    
    static {
      shortestPath.HypergraphProto.getDescriptor();
    }
    
    static {
      shortestPath.HypergraphProto.internalForceInit();
    }
  }
  
  public static final class Hypergraph extends
      com.google.protobuf.GeneratedMessage {
    // Use Hypergraph.newBuilder() to construct.
    private Hypergraph() {}
    
    private static final Hypergraph defaultInstance = new Hypergraph();
    public static Hypergraph getDefaultInstance() {
      return defaultInstance;
    }
    
    public Hypergraph getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return shortestPath.HypergraphProto.internal_static_shortestPath_Hypergraph_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return shortestPath.HypergraphProto.internal_static_shortestPath_Hypergraph_fieldAccessorTable;
    }
    
    // repeated .shortestPath.Vertex vertices = 1;
    public static final int VERTICES_FIELD_NUMBER = 1;
    private java.util.List<shortestPath.HypergraphProto.Vertex> vertices_ =
      java.util.Collections.emptyList();
    public java.util.List<shortestPath.HypergraphProto.Vertex> getVerticesList() {
      return vertices_;
    }
    public int getVerticesCount() { return vertices_.size(); }
    public shortestPath.HypergraphProto.Vertex getVertices(int index) {
      return vertices_.get(index);
    }
    
    // repeated .shortestPath.Hyperedge edges = 2;
    public static final int EDGES_FIELD_NUMBER = 2;
    private java.util.List<shortestPath.HypergraphProto.Hyperedge> edges_ =
      java.util.Collections.emptyList();
    public java.util.List<shortestPath.HypergraphProto.Hyperedge> getEdgesList() {
      return edges_;
    }
    public int getEdgesCount() { return edges_.size(); }
    public shortestPath.HypergraphProto.Hyperedge getEdges(int index) {
      return edges_.get(index);
    }
    
    public final boolean isInitialized() {
      for (shortestPath.HypergraphProto.Vertex element : getVerticesList()) {
        if (!element.isInitialized()) return false;
      }
      for (shortestPath.HypergraphProto.Hyperedge element : getEdgesList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (shortestPath.HypergraphProto.Vertex element : getVerticesList()) {
        output.writeMessage(1, element);
      }
      for (shortestPath.HypergraphProto.Hyperedge element : getEdgesList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (shortestPath.HypergraphProto.Vertex element : getVerticesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      for (shortestPath.HypergraphProto.Hyperedge element : getEdgesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static shortestPath.HypergraphProto.Hypergraph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(shortestPath.HypergraphProto.Hypergraph prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private shortestPath.HypergraphProto.Hypergraph result;
      
      // Construct using shortestPath.HypergraphProto.Hypergraph.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new shortestPath.HypergraphProto.Hypergraph();
        return builder;
      }
      
      protected shortestPath.HypergraphProto.Hypergraph internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new shortestPath.HypergraphProto.Hypergraph();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return shortestPath.HypergraphProto.Hypergraph.getDescriptor();
      }
      
      public shortestPath.HypergraphProto.Hypergraph getDefaultInstanceForType() {
        return shortestPath.HypergraphProto.Hypergraph.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public shortestPath.HypergraphProto.Hypergraph build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private shortestPath.HypergraphProto.Hypergraph buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public shortestPath.HypergraphProto.Hypergraph buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.vertices_ != java.util.Collections.EMPTY_LIST) {
          result.vertices_ =
            java.util.Collections.unmodifiableList(result.vertices_);
        }
        if (result.edges_ != java.util.Collections.EMPTY_LIST) {
          result.edges_ =
            java.util.Collections.unmodifiableList(result.edges_);
        }
        shortestPath.HypergraphProto.Hypergraph returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof shortestPath.HypergraphProto.Hypergraph) {
          return mergeFrom((shortestPath.HypergraphProto.Hypergraph)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(shortestPath.HypergraphProto.Hypergraph other) {
        if (other == shortestPath.HypergraphProto.Hypergraph.getDefaultInstance()) return this;
        if (!other.vertices_.isEmpty()) {
          if (result.vertices_.isEmpty()) {
            result.vertices_ = new java.util.ArrayList<shortestPath.HypergraphProto.Vertex>();
          }
          result.vertices_.addAll(other.vertices_);
        }
        if (!other.edges_.isEmpty()) {
          if (result.edges_.isEmpty()) {
            result.edges_ = new java.util.ArrayList<shortestPath.HypergraphProto.Hyperedge>();
          }
          result.edges_.addAll(other.edges_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              shortestPath.HypergraphProto.Vertex.Builder subBuilder = shortestPath.HypergraphProto.Vertex.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addVertices(subBuilder.buildPartial());
              break;
            }
            case 18: {
              shortestPath.HypergraphProto.Hyperedge.Builder subBuilder = shortestPath.HypergraphProto.Hyperedge.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addEdges(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .shortestPath.Vertex vertices = 1;
      public java.util.List<shortestPath.HypergraphProto.Vertex> getVerticesList() {
        return java.util.Collections.unmodifiableList(result.vertices_);
      }
      public int getVerticesCount() {
        return result.getVerticesCount();
      }
      public shortestPath.HypergraphProto.Vertex getVertices(int index) {
        return result.getVertices(index);
      }
      public Builder setVertices(int index, shortestPath.HypergraphProto.Vertex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.vertices_.set(index, value);
        return this;
      }
      public Builder setVertices(int index, shortestPath.HypergraphProto.Vertex.Builder builderForValue) {
        result.vertices_.set(index, builderForValue.build());
        return this;
      }
      public Builder addVertices(shortestPath.HypergraphProto.Vertex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.vertices_.isEmpty()) {
          result.vertices_ = new java.util.ArrayList<shortestPath.HypergraphProto.Vertex>();
        }
        result.vertices_.add(value);
        return this;
      }
      public Builder addVertices(shortestPath.HypergraphProto.Vertex.Builder builderForValue) {
        if (result.vertices_.isEmpty()) {
          result.vertices_ = new java.util.ArrayList<shortestPath.HypergraphProto.Vertex>();
        }
        result.vertices_.add(builderForValue.build());
        return this;
      }
      public Builder addAllVertices(
          java.lang.Iterable<? extends shortestPath.HypergraphProto.Vertex> values) {
        if (result.vertices_.isEmpty()) {
          result.vertices_ = new java.util.ArrayList<shortestPath.HypergraphProto.Vertex>();
        }
        super.addAll(values, result.vertices_);
        return this;
      }
      public Builder clearVertices() {
        result.vertices_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .shortestPath.Hyperedge edges = 2;
      public java.util.List<shortestPath.HypergraphProto.Hyperedge> getEdgesList() {
        return java.util.Collections.unmodifiableList(result.edges_);
      }
      public int getEdgesCount() {
        return result.getEdgesCount();
      }
      public shortestPath.HypergraphProto.Hyperedge getEdges(int index) {
        return result.getEdges(index);
      }
      public Builder setEdges(int index, shortestPath.HypergraphProto.Hyperedge value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.edges_.set(index, value);
        return this;
      }
      public Builder setEdges(int index, shortestPath.HypergraphProto.Hyperedge.Builder builderForValue) {
        result.edges_.set(index, builderForValue.build());
        return this;
      }
      public Builder addEdges(shortestPath.HypergraphProto.Hyperedge value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.edges_.isEmpty()) {
          result.edges_ = new java.util.ArrayList<shortestPath.HypergraphProto.Hyperedge>();
        }
        result.edges_.add(value);
        return this;
      }
      public Builder addEdges(shortestPath.HypergraphProto.Hyperedge.Builder builderForValue) {
        if (result.edges_.isEmpty()) {
          result.edges_ = new java.util.ArrayList<shortestPath.HypergraphProto.Hyperedge>();
        }
        result.edges_.add(builderForValue.build());
        return this;
      }
      public Builder addAllEdges(
          java.lang.Iterable<? extends shortestPath.HypergraphProto.Hyperedge> values) {
        if (result.edges_.isEmpty()) {
          result.edges_ = new java.util.ArrayList<shortestPath.HypergraphProto.Hyperedge>();
        }
        super.addAll(values, result.edges_);
        return this;
      }
      public Builder clearEdges() {
        result.edges_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      shortestPath.HypergraphProto.getDescriptor();
    }
    
    static {
      shortestPath.HypergraphProto.internalForceInit();
    }
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_shortestPath_Vertex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_shortestPath_Vertex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_shortestPath_Hyperedge_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_shortestPath_Hyperedge_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_shortestPath_Hypergraph_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_shortestPath_Hypergraph_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035shortestPath/hypergraph.proto\022\014shortes" +
      "tPath\"\"\n\006Vertex\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(" +
      "\t\"N\n\tHyperedge\022\n\n\002id\030\001 \002(\005\022\016\n\006weight\030\002 \002" +
      "(\001\022\023\n\013childrenIds\030\003 \003(\005\022\020\n\010parentId\030\004 \001(" +
      "\005\"\\\n\nHypergraph\022&\n\010vertices\030\001 \003(\0132\024.shor" +
      "testPath.Vertex\022&\n\005edges\030\002 \003(\0132\027.shortes" +
      "tPath.HyperedgeB\021B\017HypergraphProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_shortestPath_Vertex_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_shortestPath_Vertex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_shortestPath_Vertex_descriptor,
              new java.lang.String[] { "Id", "Name", },
              shortestPath.HypergraphProto.Vertex.class,
              shortestPath.HypergraphProto.Vertex.Builder.class);
          internal_static_shortestPath_Hyperedge_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_shortestPath_Hyperedge_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_shortestPath_Hyperedge_descriptor,
              new java.lang.String[] { "Id", "Weight", "ChildrenIds", "ParentId", },
              shortestPath.HypergraphProto.Hyperedge.class,
              shortestPath.HypergraphProto.Hyperedge.Builder.class);
          internal_static_shortestPath_Hypergraph_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_shortestPath_Hypergraph_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_shortestPath_Hypergraph_descriptor,
              new java.lang.String[] { "Vertices", "Edges", },
              shortestPath.HypergraphProto.Hypergraph.class,
              shortestPath.HypergraphProto.Hypergraph.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
}
